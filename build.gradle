import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
        // this allows us to find outdated dependencies via ./gradlew dependencyUpdates
        classpath "com.github.ben-manes:gradle-versions-plugin:0.28.0"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "checkstyle"
    id "java"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib" version "2.4.0"
    id "com.github.node-gradle.node"
    id "net.ltgt.apt-eclipse"
    id "net.ltgt.apt-idea"
    id "net.ltgt.apt"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
    id "com.diffplug.gradle.spotless" version "4.4.0"
}

group = "de.tum.in.www1.artemis"
version = "4.2.4"
description = "Interactive Learning with Individual Feedback"

sourceCompatibility=14
targetCompatibility=14

apply plugin: "com.github.ben-manes.versions"

apply from: "gradle/docker.gradle"
//this enables us to invoke ./gradlew liquibaseDiffChangelog
apply from: "gradle/liquibase.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

apply plugin: "jacoco"

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

spotless {
    // allows to execute the code formatting commands ./gradlew spotlessApply and ./gradlew spotlessCheck
    java {
        target project.fileTree(project.rootDir) {
            include "**/*.java"
            exclude "**/src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "**/src/main/java/de/tum/in/www1/artemis/config/SecurityConfiguration.java", "**/src/test/resources/test-data/repository-export/EncodingISO_8559_1.java", "**/node_modules/**", "**/out/**", "**/repos/**", "**/build/**", "**/src/main/generated/**", "**/src/main/resources/templates/**"
        }
        importOrderFile "artemis-spotless.importorder"
        removeUnusedImports()

        eclipse().configFile "artemis-spotless-style.xml"
    }
}

defaultTasks "bootRun"

springBoot {
    mainClassName = "de.tum.in.www1.artemis.ArtemisApp"
}

// Execute the test cases: ./gradlew executeTests

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*", "**/*CucumberIT*"
    testLogging.showStandardStreams = true

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    exclude "**/*CucumberIT*"

    maxHeapSize = '2048m'
    jvmArgs '-XX:MaxPermSize=256m'
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

configurations {
    providedRuntime
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    implementation 'com.offbytwo.jenkins:jenkins-client:0.3.8'
    implementation 'org.gitlab4j:gitlab4j-api:4.14.30'

    // TODO: at the moment we cannot upgrade to a higher version of acli due to conflicts with the used LoggerFactory
    // the problem is that newer versions integrate the logging framework directly into the jar file instead of referencing
    // a dependency. This leads to 2 logging frameworks available at the same time.
    implementation files('libs/acli-9.0.0.jar')

    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation "org.eclipse.jgit:org.eclipse.jgit:5.8.0.202006091008-r"
    // https://mvnrepository.com/artifact/net.sourceforge.plantuml/plantuml
    implementation "net.sourceforge.plantuml:plantuml:8059"
    implementation "org.imsglobal:basiclti-util:1.2.0"
    implementation "org.jasypt:jasypt:1.9.3"
    implementation "me.xdrop:fuzzywuzzy:1.3.1"
    implementation "com.atlassian.bamboo:bamboo-specs:7.0.2"
    implementation "com.thoughtworks.qdox:qdox:2.0.0"
    implementation "io.sentry:sentry-spring:1.7.30"
    implementation "io.sentry:sentry-logback:1.7.30"

    // import JHipster dependencies BOM
    implementation platform("io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}" )

    implementation "io.github.jhipster:jhipster-framework"
    implementation "org.springframework.boot:spring-boot-starter-cache:${spring_boot_version}"
    implementation "io.micrometer:micrometer-registry-prometheus:1.5.1"
    implementation "net.logstash.logback:logstash-logback-encoder:6.4"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${fasterxml_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${fasterxml_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${fasterxml_version}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${fasterxml_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${fasterxml_version}"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:${fasterxml_version}"
    implementation "com.hazelcast:hazelcast:4.0.1"
    implementation "com.hazelcast:hazelcast-hibernate53:2.0.0"
    implementation "com.hazelcast:hazelcast-spring:4.0.1"
    implementation "javax.cache:cache-api:1.1.1"
    implementation "org.hibernate:hibernate-core"
    implementation "com.zaxxer:HikariCP:3.4.5"
    implementation "org.apache.commons:commons-lang3:3.10"
    implementation "org.apache.commons:commons-text:1.8"
    implementation "commons-io:commons-io:2.7"
    implementation "javax.transaction:javax.transaction-api:1.3"
    implementation "org.hibernate:hibernate-jcache"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator:6.1.2.Final"
    implementation "org.liquibase:liquibase-core:3.9.0"
    implementation "org.springframework.boot:spring-boot-loader-tools:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-logging:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-aop:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-security:${spring_boot_version}"
    implementation ("org.springframework.boot:spring-boot-starter-web:${spring_boot_version}") {
        exclude module: "spring-boot-starter-undertow"
    }
    implementation "org.springframework.boot:spring-boot-starter-tomcat:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-websocket:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${spring_boot_version}"

    implementation "org.springframework.ldap:spring-ldap-core:2.3.3.RELEASE"
    implementation "org.springframework.data:spring-data-ldap:2.3.1.RELEASE"

    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:2.2.3.RELEASE"
    implementation "org.springframework.cloud:spring-cloud-starter-config:2.2.3.RELEASE"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors:2.2.8.RELEASE"

    // https://docs.spring.io/spring/docs/4.3.15.RELEASE/spring-framework-reference/html/websocket.html#websocket-stomp-handle-broker-relay
    implementation "io.netty:netty-all:4.1.49.Final"
    implementation "io.projectreactor.netty:reactor-netty:0.9.7.RELEASE"
    implementation "org.springframework:spring-messaging:5.2.7.RELEASE"
    implementation "org.apache.servicemix.bundles:org.apache.servicemix.bundles.spring-messaging:5.2.6.RELEASE_1"

    implementation "org.springframework.security:spring-security-config:${spring_security_version}"
    implementation "org.springframework.security:spring-security-data:${spring_security_version}"
    implementation "org.springframework.security:spring-security-web:${spring_security_version}"
    implementation "org.springframework.security:spring-security-messaging:${spring_security_version}"
    implementation "org.springframework.security:spring-security-ldap:${spring_security_version}"
    implementation "org.xmlbeam:xmlprojector:1.4.16"
    implementation "io.jsonwebtoken:jjwt-api:0.11.2"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.2"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.2"
    implementation ("io.springfox:springfox-swagger2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators:2.10.0"
    implementation "mysql:mysql-connector-java:8.0.20"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"

    implementation "org.zalando:problem-spring-web:0.25.2"
    implementation "com.ibm.icu:icu4j:67.1"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernate_version}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation ("org.springframework.boot:spring-boot-starter-test:${spring_boot_version}") {
        exclude module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test:${spring_security_version}"
    testImplementation "org.springframework.boot:spring-boot-test:${spring_boot_version}"
    testImplementation "org.assertj:assertj-core:3.16.1"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit_version}"
    testImplementation 'com.tngtech.archunit:archunit-junit5-api:0.14.1'
    testRuntimeOnly 'com.tngtech.archunit:archunit-junit5-engine:0.14.1'
    testImplementation "org.mockito:mockito-core:3.3.3"
    testImplementation "org.mockito:mockito-junit-jupiter:3.3.3"
    testImplementation "org.hamcrest:hamcrest-library:2.2"
    testImplementation "com.h2database:h2:1.4.200"
    testImplementation "org.awaitility:awaitility:4.0.3"
    testImplementation 'org.apache.maven.shared:maven-invoker:3.0.1'
    testImplementation 'org.apache.maven.surefire:surefire-report-parser:2.22.2'

    // Java's lightweight JSON library needed for the internals of the MockRestServiceServer
    testImplementation group: 'org.json', name: 'json', version: '20200518'
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

task executeTests (type: Exec) {
    commandLine "./gradlew", "test", "-x", "webpack"
}

// Taken from here: https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = "|  ", endItem = "  |"
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
            }
        }
    }
}

wrapper {
    gradleVersion = "6.5"
}

task stage(dependsOn: "bootWar") {
}

if (project.hasProperty("nodeInstall")) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}

// Command to execute the JavaDoc checkstyle verification ./gradlew checkstyleMain
checkstyle {
    toolVersion "8.10"
    configFile file("${rootDir}/checkstyle.xml")
    checkstyleTest.enabled = false
    maxErrors = 0
}

task executeCheckstyle (type: Exec) {
    commandLine "./gradlew", "checkstyleMain", "-x", "yarn_install", "-x", "webpack"
}

task buildJarForDocker (type: Exec) {
    commandLine "./gradlew", "build", "-x", "webpack", "-x", "test", "-x", "jacocoTestCoverageVerification"
}

// Available commands:
//
// 1) Build production:                             ./gradlew -Pprod -Pwar clean bootWar
// 2) Execute tests with code coverage report:      ./gradlew executeTests jacocoTestReport -x yarn_install -x webpack
// 3) Check Java code format:                       ./gradlew spotlessCheck -x yarn_install -x webpack
// 4) Apply Java code formatter:                    ./gradlew spotlessApply -x yarn_install -x webpack
// 5) Find dependency updates:                      ./gradlew dependencyUpdates
// 6) Check JavaDoc:                                ./gradlew checkstyleMain -x yarn_install -x webpack
// 7) Generate Liquibase diff:                      ./gradlew liquibaseDiffChangelog
// 8) Clear Liquibase checksums:                    ./gradlew liquibaseClearChecksums
// 9) Enforce code coverage verification:           ./gradlew jacocoTestCoverageVerification
